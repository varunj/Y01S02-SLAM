import os
import re
import numpy as np 
import matplotlib.pyplot as plt
import argparse

from image import load_image
from camera_model import CameraModel
from collections import defaultdict
import cv2

parser = argparse.ArgumentParser(
    description='Project Point Cloud generated by SO-DSO into image')

parser.add_argument('--image_dir', type=str, 
                     help='Directory containing images')

parser.add_argument('--models_dir', type=str, 
                     help='Directory containing camera models')

parser.add_argument('--points_history_file', type=str, 
                     help='Pseudo Points from SO-DSO')

parser.add_argument('--pose_history_file', type=str, 
                     help='Pose estimated from SO-DSO')

args = parser.parse_args()

fps = 10
size = (640, 480)


def process_point_clouds(points_history_file):
    idx_points = defaultdict(list)

    with open(points_history_file, 'r') as pts_file:

        for each_line in pts_file:

            splitted_line = each_line.split(' ')
            idx = int(splitted_line[0])
            x, y, z, _ = [float(j) for j in splitted_line[1:]]
            idx_points[idx].append([x, y, z])

    return idx_points

def process_poses(pose_history_file):
    
    pose_dict = {}
    with open(pose_history_file, 'r') as pose_file:
        for each_line in pose_file:
            splitted_line = each_line.split(' ')
            idx = int(splitted_line[0])
            pose_list = [float(i) for i in splitted_line[1:-1]]
            pose = np.array(pose_list, dtype=np.float32)
            pose = np.reshape(pose, [3, 4])
            pose_dict[idx] = pose

    return pose_dict

if __name__ == '__main__':
    model = CameraModel(args.models_dir, args.image_dir)

    timestamps_path = os.path.join(args.image_dir, os.pardir, os.pardir,
                                   model.camera+'.timestamps')
    

    timestamps_list = []
    with open(timestamps_path) as timestamps_file:
        for i, line in enumerate(timestamps_file):
            timestamps_list.append(int(line.split(' ')[0]))


    points_dict = process_point_clouds(args.points_history_file)
    pose_dict = process_poses(args.pose_history_file)
    id_image = 0
    for idx, pts_list in points_dict.items():
        print("{}/{}".format(id_image, len(points_dict)))
        id_image+=1
        timestamp = timestamps_list[idx]

        image_path = os.path.join(args.image_dir, str(timestamp)+'.png')
        image = load_image(image_path, model)

        pointcloud = np.array(pts_list, dtype=np.float32).transpose()
        pose = pose_dict[idx]


        uv, depth = model.project(pointcloud, image.shape, pose)
        plt.imshow(image)
        scat = plt.scatter(np.ravel(uv[0, :]), np.ravel(uv[1, :]), s=10, 
                    c=depth, edgecolors='none', cmap='jet')

        plt.xlim(0, image.shape[1])
        plt.ylim(image.shape[0], 0)
        plt.xticks([])
        plt.yticks([])
        plt.pause(0.01)
        scat.remove()

    


    







